/**
 * Generated by orval v6.17.0 üç∫
 * Do not edit manually.
 * Valos
 * Example valorant web service
 * OpenAPI spec version: 2023.9.17
 */
import axios from 'axios'
import type {
  AxiosRequestConfig,
  AxiosResponse,
  AxiosError
} from 'axios'
import {
  useQuery
} from '@tanstack/react-query'
import type {
  UseQueryOptions,
  QueryFunction,
  UseQueryResult,
  QueryKey
} from '@tanstack/react-query'
import type {
  GetContentSuccessResponse
} from './api.schemas'
import {
  rest
} from 'msw'
import {
  faker
} from '@faker-js/faker'



/**
 * @summary Get a content
 */
export const content = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetContentSuccessResponse>> => {
    return axios.get(
      `/api/content`,options
    );
  }


export const getContentQueryKey = () => [`/api/content`] as const;
  

    
export const getContentQueryOptions = <TData = Awaited<ReturnType<typeof content>>, TError = AxiosError<unknown>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof content>>, TError, TData>, axios?: AxiosRequestConfig}
): UseQueryOptions<Awaited<ReturnType<typeof content>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getContentQueryKey();

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof content>>> = ({ signal }) => content({ signal, ...axiosOptions });
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type ContentQueryResult = NonNullable<Awaited<ReturnType<typeof content>>>
export type ContentQueryError = AxiosError<unknown>

/**
 * @summary Get a content
 */
export const useContent = <TData = Awaited<ReturnType<typeof content>>, TError = AxiosError<unknown>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof content>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getContentQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getContentMock = () => ({content: {characters: Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({localizedNames: {'ja-JP': faker.random.word()}}))}})

export const getContentMSW = () => [
rest.get('*/api/content', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getContentMock()),
        )
      }),]
